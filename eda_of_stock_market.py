# -*- coding: utf-8 -*-
"""EDA of Stock Market

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uEXZBqml9RnhyHeBbaUA0Rt_dno95jsv

#**Importing Libraries**
"""

from pandas_datareader import data
import statsmodels.api as sm
from pylab import rcParams
from pandas.plotting import autocorrelation_plot
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""#**Obtain Data from Yahoo Finance**"""

df = data.DataReader("RELIANCE.NS",
                     data_source = "yahoo",
                     start = "2010-01-28",
                     end = "2020-12-28")
df.isna().any()
df.head()

"""#**Rolling Mean / Average Calculation**
The Rolling Mean is the mean of an n-sized window sliding from the beginning to the end of the data frame.
"""

# Rolling Mean / Moving Average Calculation
df.rolling(window = 5).mean()

plt.style.use("fivethirtyeight")
plt.figure(figsize=(10,8))
plt.xlabel("Year")
plt.ylabel("Price")
plt.title("Closing Price Graph")
plt.plot(df["Close"])

plt.style.use("fivethirtyeight")
plt.figure(figsize=(10,8))
plt.xlabel("Year")
plt.ylabel("Price")
plt.title("Closing Price and Rolling Mean of Closing Price Graph")
plt.plot(df["Close"])   #Blue
plt.plot(df.rolling(window = 20).mean()["Close"])   #Orange

"""#**Stock Volume Line Plot**
Higher Volume of Trades observed after 2020
"""

fig, ax = plt.subplots(figsize=(20, 8))
ax.set_title("Daily Volume")
ax.set_xlabel("Year")
ax.set_ylabel("Volume")
sns.lineplot(df.index, df['Volume'] )

"""#**Time Series Decomposition**
**Seasonal Component:**  Shows the recurring "normal" variations i.e. the ups and downs of time-series data.

**Trend Component:** This shows the pattern in the data that spans across seasonal periods.

**Residual Component:** After Decomposition of Time Series into Trend & Seasonal Component, what's leftover becomes the Residual.
"""

df['Date'] = pd.to_datetime(df.index)
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

plt.style.use("fivethirtyeight")


y = df[['Date','Open']].copy()
y.set_index('Date', inplace=True)
y.index = pd.to_datetime(y.index)
y = y.resample("1M").mean()

rcParams['figure.figsize'] = 15, 12
rcParams['axes.labelsize'] = 20
rcParams['ytick.labelsize'] = 16
rcParams['xtick.labelsize'] = 16

decomposition = sm.tsa.seasonal_decompose(y, model='multiplicative', freq = 12)
decomp = decomposition.plot()
decomp.suptitle('Open decomposition', fontsize=22)

"""#**ReSampling**
To observe annual trends and monthly trends and extract important features
"""

#Sampling of Time Series
df_sampled = df.resample("BM").mean()
df_sampled

"""#**Auto Correlation**
An Autocorrelation Plot tells us how the current value of the time-series data is related to the previous values by considering trend, seasonality, cyclic and residual.
"""

#Autocorrelation Plot
autocorrelation_plot(df_sampled["Close"])

"""#**Seasonal Variation**"""

# Date Split Up
df['Date'] = pd.to_datetime(df.index)
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

variable = 'Close'
fig, ax = plt.subplots(figsize=(15, 6))

sns.lineplot(df['Month'], df[variable], hue = df['Year'])
ax.set_title('Seasonal Plot of Price', fontsize = 20, loc='center', fontdict=dict(weight='bold'))
ax.set_xlabel('Month', fontsize = 16, fontdict=dict(weight='bold'))
ax.set_ylabel('Price', fontsize = 16, fontdict=dict(weight='bold'))
ax.legend(labels = [str(2010+i) for i in range(11)], bbox_to_anchor=(1.1, 1.05))

"""#**Box Plot - To Depict Trend and Seasonality**"""

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))

sns.boxplot(df['Year'], df[variable], ax=ax[0])
ax[0].set_title('Year-wise Box Plot\n(The Trend)', fontsize = 20, loc='center', fontdict=dict(weight='bold'))
ax[0].set_xlabel('Year', fontsize = 16, fontdict=dict(weight='bold'))
ax[0].set_ylabel('Price', fontsize = 16, fontdict=dict(weight='bold'))

sns.boxplot(df['Month'], df[variable], ax=ax[1])
ax[1].set_title('Month-wise Box Plot\n(The Seasonality)', fontsize = 20, loc='center', fontdict=dict(weight='bold'))
ax[1].set_xlabel('Month', fontsize = 16, fontdict=dict(weight='bold'))
ax[1].set_ylabel('Price', fontsize = 16, fontdict=dict(weight='bold'))

fig.autofmt_xdate()